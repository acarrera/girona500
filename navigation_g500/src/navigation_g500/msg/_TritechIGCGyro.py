"""autogenerated by genmsg_py from TritechIGCGyro.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg

class TritechIGCGyro(roslib.message.Message):
  _md5sum = "cb505176bc9b749cce0ff6ca531ac44e"
  _type = "navigation_g500/TritechIGCGyro"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 ifg_heading 
float64 igc_heading 
float64 pitch 
float64 roll 
float64 heave_acceleration 
int32 ifg_state 
int32 drift_lock 
string data_quality 
string water_ingress 
string raw_data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','ifg_heading','igc_heading','pitch','roll','heave_acceleration','ifg_state','drift_lock','data_quality','water_ingress','raw_data']
  _slot_types = ['Header','float64','float64','float64','float64','float64','int32','int32','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,ifg_heading,igc_heading,pitch,roll,heave_acceleration,ifg_state,drift_lock,data_quality,water_ingress,raw_data
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(TritechIGCGyro, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.ifg_heading is None:
        self.ifg_heading = 0.
      if self.igc_heading is None:
        self.igc_heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.heave_acceleration is None:
        self.heave_acceleration = 0.
      if self.ifg_state is None:
        self.ifg_state = 0
      if self.drift_lock is None:
        self.drift_lock = 0
      if self.data_quality is None:
        self.data_quality = ''
      if self.water_ingress is None:
        self.water_ingress = ''
      if self.raw_data is None:
        self.raw_data = ''
    else:
      self.header = std_msgs.msg._Header.Header()
      self.ifg_heading = 0.
      self.igc_heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.heave_acceleration = 0.
      self.ifg_state = 0
      self.drift_lock = 0
      self.data_quality = ''
      self.water_ingress = ''
      self.raw_data = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d2i.pack(_x.ifg_heading, _x.igc_heading, _x.pitch, _x.roll, _x.heave_acceleration, _x.ifg_state, _x.drift_lock))
      _x = self.data_quality
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.water_ingress
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.raw_data
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.ifg_heading, _x.igc_heading, _x.pitch, _x.roll, _x.heave_acceleration, _x.ifg_state, _x.drift_lock,) = _struct_5d2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data_quality = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.water_ingress = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_data = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d2i.pack(_x.ifg_heading, _x.igc_heading, _x.pitch, _x.roll, _x.heave_acceleration, _x.ifg_state, _x.drift_lock))
      _x = self.data_quality
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.water_ingress
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.raw_data
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.ifg_heading, _x.igc_heading, _x.pitch, _x.roll, _x.heave_acceleration, _x.ifg_state, _x.drift_lock,) = _struct_5d2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data_quality = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.water_ingress = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_data = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_5d2i = struct.Struct("<5d2i")
