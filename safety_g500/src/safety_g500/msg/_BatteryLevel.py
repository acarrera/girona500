"""autogenerated by genmsg_py from BatteryLevel.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg

class BatteryLevel(roslib.message.Message):
  _md5sum = "742ecb4c4f95438ce7445e314476afb1"
  _type = "safety_g500/BatteryLevel"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string status
float64 charge
int32 minutes
int32 packs
int32 cycles
int32 full_charge
int32 full_discharge
float64 amps
float64 watts
float64 volts
string[8] controller_1
string[8] controller_2
string[8] controller_3


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','status','charge','minutes','packs','cycles','full_charge','full_discharge','amps','watts','volts','controller_1','controller_2','controller_3']
  _slot_types = ['Header','string','float64','int32','int32','int32','int32','int32','float64','float64','float64','string[8]','string[8]','string[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,status,charge,minutes,packs,cycles,full_charge,full_discharge,amps,watts,volts,controller_1,controller_2,controller_3
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(BatteryLevel, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.status is None:
        self.status = ''
      if self.charge is None:
        self.charge = 0.
      if self.minutes is None:
        self.minutes = 0
      if self.packs is None:
        self.packs = 0
      if self.cycles is None:
        self.cycles = 0
      if self.full_charge is None:
        self.full_charge = 0
      if self.full_discharge is None:
        self.full_discharge = 0
      if self.amps is None:
        self.amps = 0.
      if self.watts is None:
        self.watts = 0.
      if self.volts is None:
        self.volts = 0.
      if self.controller_1 is None:
        self.controller_1 = ['','','','','','','','']
      if self.controller_2 is None:
        self.controller_2 = ['','','','','','','','']
      if self.controller_3 is None:
        self.controller_3 = ['','','','','','','','']
    else:
      self.header = std_msgs.msg._Header.Header()
      self.status = ''
      self.charge = 0.
      self.minutes = 0
      self.packs = 0
      self.cycles = 0
      self.full_charge = 0
      self.full_discharge = 0
      self.amps = 0.
      self.watts = 0.
      self.volts = 0.
      self.controller_1 = ['','','','','','','','']
      self.controller_2 = ['','','','','','','','']
      self.controller_3 = ['','','','','','','','']

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d5i3d.pack(_x.charge, _x.minutes, _x.packs, _x.cycles, _x.full_charge, _x.full_discharge, _x.amps, _x.watts, _x.volts))
      for val1 in self.controller_1:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      for val1 in self.controller_2:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      for val1 in self.controller_3:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.charge, _x.minutes, _x.packs, _x.cycles, _x.full_charge, _x.full_discharge, _x.amps, _x.watts, _x.volts,) = _struct_d5i3d.unpack(str[start:end])
      self.controller_1 = []
      for i in range(0, 8):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.controller_1.append(val1)
      self.controller_2 = []
      for i in range(0, 8):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.controller_2.append(val1)
      self.controller_3 = []
      for i in range(0, 8):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.controller_3.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d5i3d.pack(_x.charge, _x.minutes, _x.packs, _x.cycles, _x.full_charge, _x.full_discharge, _x.amps, _x.watts, _x.volts))
      for val1 in self.controller_1:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      for val1 in self.controller_2:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      for val1 in self.controller_3:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.charge, _x.minutes, _x.packs, _x.cycles, _x.full_charge, _x.full_discharge, _x.amps, _x.watts, _x.volts,) = _struct_d5i3d.unpack(str[start:end])
      self.controller_1 = []
      for i in range(0, 8):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.controller_1.append(val1)
      self.controller_2 = []
      for i in range(0, 8):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.controller_2.append(val1)
      self.controller_3 = []
      for i in range(0, 8):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.controller_3.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_d5i3d = struct.Struct("<d5i3d")
